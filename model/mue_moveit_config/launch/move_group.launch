<launch>

  <!-- GDB Debug Option -->
  <arg name="debug" default="false" />
  <arg unless="$(arg debug)" name="launch_prefix" value="" />
  <arg     if="$(arg debug)" name="launch_prefix"
           value="gdb -x $(find mue_moveit_config)/launch/gdb_settings.gdb --ex run --args" />

  <arg name="robot_name"/>
  <arg name="robot_namespace"/>
  <arg name="tf_prefix"/>

  <!-- Verbose Mode Option -->
  <arg name="info" default="$(arg debug)" />
  <arg unless="$(arg info)" name="command_args" value="" />
  <arg     if="$(arg info)" name="command_args" value="--debug" />

   <!-- By default, we do not start a database (it can be large) -->
  <arg name="db" default="true" />
  <!-- Allow user to specify database location -->
  <!-- <arg name="db_path" default="$(find panda_moveit_config)/default_warehouse_mongo_db" /> -->
  <arg name="db_path" default="/home/robot/.ros/constraint_approximations_database" />

  <!-- move_group settings -->
  <arg name="pipeline" default="ompl" />
  <arg name="allow_trajectory_execution" default="true"/>
  <arg name="fake_execution" default="false"/>
  <arg name="max_safe_path_cost" default="1"/>
  <arg name="jiggle_fraction" default="0.05" />
  <arg name="publish_monitored_planning_scene" default="true"/>

  <!-- <arg name="capabilities" default=""/> -->
  <arg name="disable_capabilities" default=""/>
  <!-- load these non-default MoveGroup capabilities (space seperated) -->

  <!-- MoveGroup capabilities to load -->
  <arg name="capabilities" value="move_group/MoveGroupKinematicsService" />

  <!-- Moveit plugin -->
  <arg name="kinematics_srv_plugin" value="srv_kinematics_plugin/SrvKinematicsPlugin" />


  <!--
  <arg name="capabilities" value="
                a_package/AwsomeMotionPlanningCapability
                another_package/GraspPlanningPipeline
                " />
  -->

  <!-- inhibit these default MoveGroup capabilities (space seperated) -->
  <!--
  <arg name="disable_capabilities" value="
                move_group/MoveGroupKinematicsService
                move_group/ClearOctomapService
                " />
  -->

  <!-- <arg name="load_robot_description" default="true" /> -->
  <!-- load URDF, SRDF and joint_limits configuration -->
  <!-- <include file="$(find mue_moveit_config)/launch/planning_context.launch">
    <arg name="load_robot_description" value="$(arg load_robot_description)" />
    <arg name="tf_prefix" value="$(arg tf_prefix)"/>
  </include> -->

  <!-- load URDF, SRDF and joint_limits configuration -->
  <include file="$(find mue_moveit_config)/launch/planning_context.launch">
    <arg name="tf_prefix" value="$(arg tf_prefix)"/>
  </include>

  <!-- Planning Functionality -->
  <include ns="move_group" file="$(find mue_moveit_config)/launch/planning_pipeline.launch.xml">
    <arg name="pipeline" value="$(arg pipeline)" />
    <arg name="tf_prefix" value="$(arg tf_prefix)"/>
  </include>

  <!-- Trajectory Execution Functionality -->
  <include ns="move_group" file="$(find mue_moveit_config)/launch/trajectory_execution.launch.xml" if="$(arg allow_trajectory_execution)">
    <arg name="moveit_manage_controllers" value="true" />
    <arg name="moveit_controller_manager" value="mue" unless="$(arg fake_execution)"/>
    <arg name="moveit_controller_manager" value="fake" if="$(arg fake_execution)"/>
    <arg name="tf_prefix" value="$(arg tf_prefix)"/>
  </include>

  <!-- Sensors Functionality -->
  <include ns="move_group" file="$(find mue_moveit_config)/launch/sensor_manager.launch.xml" if="$(arg allow_trajectory_execution)">
    <arg name="moveit_sensor_manager" value="mue" />
  </include>

  <!-- Start the actual move_group node/action server -->
  <node name="move_group" launch-prefix="$(arg launch_prefix)" pkg="moveit_ros_move_group" type="move_group" respawn="false" output="screen" args="$(arg command_args)">
    <!-- Set the display variable, in case OpenGL code is used internally -->
    <env name="DISPLAY" value="$(optenv DISPLAY :0)" />

    <param name="allow_trajectory_execution" value="$(arg allow_trajectory_execution)"/>
    <param name="max_safe_path_cost" value="$(arg max_safe_path_cost)"/>
    <param name="jiggle_fraction" value="$(arg jiggle_fraction)" />
    <param name="capabilities" value="$(arg capabilities)"/>
    <param name="disable_capabilities" value="$(arg disable_capabilities)"/>
    <param name="kinematics_srv_plugin" value="$(arg kinematics_srv_plugin)"/>
    <!-- <param name="move_group/constraint_approximations_path" value="/home/robot/.ros/constraint_approximations_database/ur5e_arm_2021-04-29T09:24:37.308874.ompldb"/> -->


    <!-- Publish the planning scene of the physical robot so that rviz plugin can know actual robot -->
    <param name="planning_scene_monitor/publish_planning_scene" value="$(arg publish_monitored_planning_scene)" />
    <param name="planning_scene_monitor/publish_geometry_updates" value="$(arg publish_monitored_planning_scene)" />
    <param name="planning_scene_monitor/publish_state_updates" value="$(arg publish_monitored_planning_scene)" />
    <param name="planning_scene_monitor/publish_transforms_updates" value="$(arg publish_monitored_planning_scene)" />
    <remap from="/joint_states" to="/$(arg robot_namespace)/joint_states" />
  </node>

  <!-- If database loading was enabled, start mongodb as well -->
  <include file="$(find panda_moveit_config)/launch/default_warehouse_db.launch" if="$(arg db)">
    <arg name="moveit_warehouse_database_path" value="$(arg db_path)"/>
  </include>


</launch>
